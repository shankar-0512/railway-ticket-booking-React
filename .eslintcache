[{"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/index.js":"1","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/App.js":"2","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/index.js":"3","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/login-slice.js":"4","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/userInputsSlice.js":"5","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/Home.js":"6","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Authentication/Login.js":"7","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Profile/MyProfile.js":"8","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/MyBookings.js":"9","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/LoadingSpinner.js":"10","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/Booking.js":"11","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/ShipList.js":"12","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Modal.js":"13","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/TicketList.js":"14","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Button/Button.js":"15","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/CommonInput/Input.js":"16","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/layout/Layout.js":"17","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/hooks/use-http.js":"18","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Card/Card.js":"19","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/Ship.js":"20","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/Tickets.js":"21","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/layout/MainNavigation.js":"22","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Card/ShipsCard.js":"23","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/ShipDate.js":"24","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/TicketDate.js":"25"},{"size":358,"mtime":1659413304975,"results":"26","hashOfConfig":"27"},{"size":3912,"mtime":1660635089387,"results":"28","hashOfConfig":"27"},{"size":272,"mtime":1659413304975,"results":"29","hashOfConfig":"27"},{"size":435,"mtime":1659413304975,"results":"30","hashOfConfig":"27"},{"size":528,"mtime":1659413304975,"results":"31","hashOfConfig":"27"},{"size":8882,"mtime":1660283239936,"results":"32","hashOfConfig":"27"},{"size":15260,"mtime":1660280337539,"results":"33","hashOfConfig":"27"},{"size":13827,"mtime":1659413304973,"results":"34","hashOfConfig":"27"},{"size":4346,"mtime":1660296414309,"results":"35","hashOfConfig":"27"},{"size":167,"mtime":1659413304975,"results":"36","hashOfConfig":"27"},{"size":10978,"mtime":1660297527181,"results":"37","hashOfConfig":"27"},{"size":622,"mtime":1660292357004,"results":"38","hashOfConfig":"27"},{"size":738,"mtime":1659413304975,"results":"39","hashOfConfig":"27"},{"size":860,"mtime":1659871143030,"results":"40","hashOfConfig":"27"},{"size":373,"mtime":1659413304974,"results":"41","hashOfConfig":"27"},{"size":780,"mtime":1659413304973,"results":"42","hashOfConfig":"27"},{"size":314,"mtime":1659413304975,"results":"43","hashOfConfig":"27"},{"size":1320,"mtime":1659413304975,"results":"44","hashOfConfig":"27"},{"size":218,"mtime":1659413304974,"results":"45","hashOfConfig":"27"},{"size":1272,"mtime":1660295943369,"results":"46","hashOfConfig":"27"},{"size":1267,"mtime":1659933616040,"results":"47","hashOfConfig":"27"},{"size":1612,"mtime":1659413304975,"results":"48","hashOfConfig":"27"},{"size":278,"mtime":1659413304975,"results":"49","hashOfConfig":"27"},{"size":241,"mtime":1659413304973,"results":"50","hashOfConfig":"27"},{"size":561,"mtime":1659413304974,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"h4pme0",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/index.js",[],["106","107"],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/App.js",["108","109","110"],"import React, { Suspense } from \"react\";\nimport { Route, Routes, Navigate, Link, useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { loginActions } from \"./store/login-slice\";\nimport { useDispatch } from \"react-redux\";\nimport Login from \"./components/Authentication/Login\";\nimport { useState, useEffect } from \"react\";\nimport LoadingSpinner from \"./components/UI/LoadingSpinner\";\n\nconst Home = React.lazy(() => import(\"./components/Home/Home\"));\nconst MyProfile = React.lazy(() => import(\"./components/Profile/MyProfile\"));\nconst MyBookings = React.lazy(() =>\n  import(\"./components/Ticket Booking/MyBookings\")\n);\nconst Booking = React.lazy(() => import(\"./components/Ticket Booking/Booking\"));\n\nfunction App() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [signUpFlag, setSignUpFlag] = useState(true);\n  const [navigateLoginF, setNavigateLoginF] = useState(true);\n\n  const [sessionTimeout, setSessionTimeout] = useState(false);\n\n  const isAuthenticated = useSelector((state) => state.login.isAuthenticated);\n\n  function postSignUpHandler() {\n    setSignUpFlag(true);\n    setNavigateLoginF(true);\n  }\n\n  function resetNavigateLoginF() {\n    setNavigateLoginF(false);\n  }\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      localStorage.setItem(\"setupTime\", now);\n      setSessionTimeout(false);\n      navigate(\"/home\");\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/login\");\n    }\n  }, [isAuthenticated]);\n\n  if (isAuthenticated) {\n    var hours = 6; // to clear the localStorage after 1 hour\n    // (if someone want to clear after 8hrs simply change hours=8)\n    var now = new Date().getTime();\n    var setupTime = localStorage.getItem(\"setupTime\");\n    if (setupTime == null) {\n      localStorage.setItem(\"setupTime\", now);\n    } else {\n      if (now - setupTime > hours * 60 * 60 * 1000) {\n        dispatch(loginActions.LoginStateHandler());\n        setSessionTimeout(true);\n        localStorage.clear();\n      }\n    }\n  }\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"isLoggedIn\");\n    const userId = localStorage.getItem(\"userId\");\n    if (loggedInUser) {\n      dispatch(loginActions.LoginStateHandler());\n      dispatch(loginActions.UpdateUserId(userId));\n    }\n  }, []);\n\n  return (\n    <Suspense\n      fallback={\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      }\n    >\n      <Routes>\n        <Route path=\"/\" element={<Navigate replace to=\"/login\" />} />\n        <Route\n          path=\"/login\"\n          element={<Login sessionTimeout={sessionTimeout} />}\n        >\n          <Route\n            path=\"\"\n            element={\n              <Link\n                style={{ textDecoration: \"none\" }}\n                className={null}\n                to={\"/signUp\"}\n                onClick={resetNavigateLoginF}\n              >\n                New User?\n              </Link>\n            }\n          />\n        </Route>\n        <Route\n          path=\"/signUp\"\n          element={\n            <Login\n              signUpFlag={signUpFlag}\n              postSignUp={postSignUpHandler}\n              loginF={navigateLoginF}\n            />\n          }\n        >\n          <Route\n            path=\"\"\n            element={\n              <Link\n                style={{ textDecoration: \"none\" }}\n                className={null}\n                to={\"/login\"}\n                onClick={postSignUpHandler}\n              >\n                Already have an account?\n              </Link>\n            }\n          />\n        </Route>\n        <Route path=\"/home\" element={<Home />} />\n        <Route path=\"/home/myProfile\" element={<MyProfile />} />\n        <Route path=\"/home/booking/:shipId\" element={<Booking />} />\n        <Route path=\"/home/myBookings\" element={<MyBookings />} />\n      </Routes>\n    </Suspense>\n  );\n}\n\nexport default App;\n","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/index.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/login-slice.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/store/userInputsSlice.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/Home.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Authentication/Login.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Profile/MyProfile.js",["111","112","113"],"import React from \"react\";\nimport Layout from \"../layout/Layout\";\nimport classes from \"./MyProfile.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { useEffect, useState, useRef } from \"react\";\nimport moment from \"moment\";\nimport styles from \"../CommonInput/Input.module.css\";\nimport Card from \"../UI/Card/Card\";\nimport useHttp from \"../../hooks/use-http\";\nimport Input from \"../CommonInput/Input\";\nimport loginStyles from \"../Authentication/Login.module.css\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport Modal from \"../UI/Modal\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nvar pswCode = null;\nvar pswMessage = null;\nfunction MyProfile() {\n  //************DECLARATIONS************//\n\n  const navigate = useNavigate();\n\n  const {\n    isLoading: fetchIsLoading,\n    sendRequest: sendFetchRequest,\n    response: fetchResponse,\n  } = useHttp();\n\n  const {\n    isLoading: saveIsLoading,\n    error: saveError,\n    sendRequest: sendSaveRequest,\n    response: saveResponse,\n    resetError: saveResetError,\n    resetResponse: saveResetResponse,\n  } = useHttp();\n\n  const {\n    isLoading: pswIsLoading,\n    error: pswError,\n    sendRequest: sendPasswordRequest,\n    response: pswResponse,\n    resetError: resetPswError,\n    resetResponse: resetPswResponse,\n  } = useHttp();\n\n  //STATES\n  const [enableForm, setEnableForm] = useState(false);\n  const [userName, setUserName] = useState(fetchResponse.userName);\n  const [basePlanet, setBasePlanet] = useState(fetchResponse.basePlanet);\n  const [dob, setDob] = useState(fetchResponse.dob);\n  const [oldPsw, setOldPsw] = useState(\"\");\n  const [newPsw, setNewPsw] = useState(\"\");\n  const [confirmNewPsw, setConfirmNewPsw] = useState(\"\");\n  const [changePassword, setChangePassword] = useState(false);\n  const userEmail = useSelector((state) => state.login.userId);\n\n  //REFS\n  const nameInputRef = useRef();\n  const planetInputRef = useRef();\n  const dateInputRef = useRef();\n  const oldPswInputRef = useRef();\n  const newPswInputRef = useRef();\n  const confirmNewPswInputRef = useRef();\n\n  //************API CALLS************//\n\n  //Request to backend for profile data\n  const FetchProfileHandler = async (requestJson) => {\n    sendFetchRequest({\n      url: \"https://space-ticket-booking-java.herokuapp.com/api/protected/fetchProfileDetails\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        email: requestJson.userEmail,\n      },\n      errorMsg: \"Request failed!\",\n    });\n  };\n\n  //Request to backend for profile data\n  const saveEditMode = async (requestJson) => {\n    sendSaveRequest({\n      url: \"https://space-ticket-booking-java.herokuapp.com/api/protected/saveUserDetails\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        email: requestJson.userEmail,\n        name: requestJson.userName,\n        basePlanet: requestJson.basePlanet,\n        dob: requestJson.dob,\n      },\n      errorMsg: \"Request failed!\",\n    });\n  };\n\n  //Request to backend for changing password\n  const ChangePasswordHandler = async (requestJson) => {\n    sendPasswordRequest({\n      url: \"https://space-ticket-booking-java.herokuapp.com/api/protected/changePassword\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        userEmail: requestJson.userEmail,\n        oldPassword: requestJson.oldPsw,\n        newPassword: requestJson.newPsw,\n        confirmNewPassword: requestJson.confirmNewPsw,\n      },\n      errorMsg: \"Request failed!\",\n    });\n  };\n\n  //************STATE HANDLERS************//\n\n  function onEditHandler() {\n    setEnableForm(true);\n  }\n\n  function disableFormHandler() {\n    setEnableForm(false);\n  }\n\n  function nameChangeHandler(event) {\n    setUserName(event.target.value);\n  }\n\n  function planetChangeHandler(event) {\n    setBasePlanet(event.target.value);\n  }\n\n  function dateChangeHandler(event) {\n    setDob(event.target.value);\n  }\n\n  function oldPswChangeHandler(event) {\n    setOldPsw(event.target.value);\n  }\n\n  function newPswChangeHandler(event) {\n    setNewPsw(event.target.value);\n  }\n\n  function confirmNewPswChangeHandler(event) {\n    setConfirmNewPsw(event.target.value);\n  }\n\n  //************ACTION HANDLERS************//\n\n  useEffect(() => {\n    setUserName(fetchResponse.userName);\n    setBasePlanet(fetchResponse.basePlanet);\n    setDob(fetchResponse.dob);\n  }, [fetchResponse.userName, fetchResponse.basePlanet, fetchResponse.dob]);\n\n  useEffect(() => {\n    const requestJson = { userEmail };\n    FetchProfileHandler(requestJson);\n  }, []);\n\n  function EditModeSubmitHandler(event) {\n    event.preventDefault();\n    const requestJson = {\n      userEmail,\n      userName,\n      basePlanet,\n      dob,\n    };\n\n    saveEditMode(requestJson);\n  }\n\n  function navigateBack() {\n    disableFormHandler();\n    navigate(\"/home\");\n  }\n\n  useEffect(() => {\n    if (saveResponse.responseCode === 0) {\n      disableFormHandler();\n      navigate(\"/home/myProfile\");\n    }\n  }, [saveResponse.responseMessage, navigate]);\n\n  useEffect(() => {\n    if (saveResponse.responseCode === 0) {\n      const fetchRequest = { userEmail };\n      FetchProfileHandler(fetchRequest);\n    }\n  }, [saveResponse.responseMessage]);\n\n  function closeErrorModal() {\n    saveResetError();\n    saveResetResponse();\n    if (saveResponse.responseMessage === undefined) {\n      navigate(\"/home\");\n    }\n  }\n\n  function resetPasswordResponses() {\n    resetPswError();\n    resetPswResponse();\n  }\n\n  function closePswMsgModal() {\n    if (pswCode === 1) {\n      setChangePassword(true);\n    } else if (pswCode === 0) {\n      pswCode = null;\n      pswMessage = null;\n      navigate(\"/home\");\n    }\n  }\n\n  function changePasswordSubmitHandler() {\n    setChangePassword(true);\n  }\n\n  function closeChangePswModal() {\n    setChangePassword(false);\n    resetPasswordResponses();\n  }\n\n  function onChangePassword(event) {\n    event.preventDefault();\n\n    const requestJson = {\n      userEmail,\n      oldPsw,\n      newPsw,\n      confirmNewPsw,\n    };\n    ChangePasswordHandler(requestJson);\n  }\n\n  if (pswResponse.responseCode !== undefined) {\n    pswCode = pswResponse.responseCode;\n    pswMessage = pswResponse.responseMessage;\n    setChangePassword(false);\n    resetPasswordResponses();\n  }\n\n  //************MODALS************//\n\n  const modalActions = (\n    <div className={classes.actions}>\n      <Button className={classes.btn} onClick={closeErrorModal}>\n        Close\n      </Button>\n    </div>\n  );\n\n  const saveModalContent = (\n    <React.Fragment>\n      <div className={classes.total}>\n        <span>{saveResponse.responseMessage}</span>\n      </div>\n    </React.Fragment>\n  );\n\n  const passwordModalActions = (\n    <div className={classes.actions}>\n      <Button className={classes.btn} onClick={closePswMsgModal}>\n        Okay\n      </Button>\n    </div>\n  );\n\n  const passwordModalContent = (\n    <React.Fragment>\n      <div className={classes.total}>\n        <span>\n          {pswResponse.responseMessage}\n          {pswMessage}\n        </span>\n      </div>\n    </React.Fragment>\n  );\n\n  const ChangePasswordModalContent = (\n    <React.Fragment>\n      <div className={classes.total}>\n        <form onSubmit={onChangePassword}>\n          <Input\n            ref={oldPswInputRef}\n            id=\"oldPsw\"\n            label=\"Old Password\"\n            type=\"password\"\n            value={oldPsw}\n            onChange={oldPswChangeHandler}\n          />\n          <Input\n            ref={newPswInputRef}\n            id=\"newPsw\"\n            label=\"New Password\"\n            type=\"password\"\n            value={newPsw}\n            onChange={newPswChangeHandler}\n          />\n          <Input\n            ref={confirmNewPswInputRef}\n            id=\"conNewPsw\"\n            label=\"Confirm New Password\"\n            type=\"password\"\n            value={confirmNewPsw}\n            onChange={confirmNewPswChangeHandler}\n          />\n          <Button className={classes.button} type=\"submit\">\n            Submit\n          </Button>\n          <Button\n            className={classes.button}\n            type=\"button\"\n            onClick={closeChangePswModal}\n          >\n            Cancel\n          </Button>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n\n  //************LOADING SPINNERS************//\n\n  if (fetchIsLoading) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (saveIsLoading) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (pswIsLoading) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Layout>\n        {changePassword && <Modal>{ChangePasswordModalContent}</Modal>}\n        {(pswError ||\n          pswResponse.responseCode !== undefined ||\n          pswCode === 0) && (\n          <Modal>\n            {passwordModalContent}\n            {passwordModalActions}\n          </Modal>\n        )}\n        {(saveError || saveResponse.responseCode !== undefined) && (\n          <Modal>\n            {saveModalContent}\n            {modalActions}\n          </Modal>\n        )}\n        {!enableForm && (\n          <div>\n            <h2 className={classes.h2Profile}>My Profile</h2>\n            <div className={classes.control}>\n              <label>Name : </label>\n              <label>{fetchResponse.userName}</label>\n            </div>\n            <div className={classes.control}>\n              <label>E-Mail : </label>\n              <label>{fetchResponse.userEmail}</label>\n            </div>\n            <div className={classes.control}>\n              <label>Password : </label>\n              <label>{fetchResponse.userPassword}</label>\n            </div>\n            <div className={classes.control}>\n              <label>Base Planet : </label>\n              <label>{fetchResponse.basePlanet}</label>\n            </div>\n            <div className={classes.control}>\n              <label>Date of Birth : </label>\n              <label>{fetchResponse.dob}</label>\n            </div>\n            <div className={loginStyles.action}>\n              <Button\n                type=\"button\"\n                className={classes.button}\n                onClick={onEditHandler}\n              >\n                Edit\n              </Button>\n              <Button\n                type=\"button\"\n                className={classes.button}\n                onClick={changePasswordSubmitHandler}\n              >\n                Change Password\n              </Button>\n              <Button\n                type=\"button\"\n                className={classes.button}\n                onClick={navigateBack}\n              >\n                Back\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {enableForm && (\n          <Card className={loginStyles.login}>\n            <form onSubmit={EditModeSubmitHandler}>\n              <Input\n                ref={nameInputRef}\n                id=\"name\"\n                label=\"Name\"\n                type=\"text\"\n                value={userName}\n                onChange={nameChangeHandler}\n              />\n              <div className={styles.control}>\n                <label>Base Planet</label>\n                <select\n                  ref={planetInputRef}\n                  className={loginStyles.select}\n                  name=\"planetList\"\n                  id=\"planets\"\n                  value={basePlanet}\n                  onChange={planetChangeHandler}\n                >\n                  <option value=\"\" style={{ color: \"grey\" }}>\n                    Select an Option\n                  </option>\n                  <option value=\"Earth\" style={{ color: \"black\" }}>\n                    Earth\n                  </option>\n                  <option value=\"Mars\" style={{ color: \"black\" }}>\n                    Mars\n                  </option>\n                  <option value=\"Moon\" style={{ color: \"black\" }}>\n                    Moon\n                  </option>\n                  <option value=\"Ceres\" style={{ color: \"black\" }}>\n                    Ceres\n                  </option>\n                  <option value=\"Europa\" style={{ color: \"black\" }}>\n                    Europa\n                  </option>\n                  <option value=\"Titan\" style={{ color: \"black\" }}>\n                    Titan\n                  </option>\n                  <option value=\"EB-15\" style={{ color: \"black\" }}>\n                    EB-15\n                  </option>\n                  <option value=\"ISS\" style={{ color: \"black\" }}>\n                    ISS\n                  </option>\n                  <option value=\"Kepler-186F\" style={{ color: \"black\" }}>\n                    Kepler-186F\n                  </option>\n                </select>\n              </div>\n              <div className={styles.control}>\n                <label htmlFor=\"date\">Date of Birth</label>\n                <input\n                  ref={dateInputRef}\n                  id=\"date\"\n                  label=\"Date of Birth\"\n                  type=\"date\"\n                  value={dob}\n                  onChange={dateChangeHandler}\n                  max={moment().format(\"YYYY-MM-DD\")}\n                ></input>\n              </div>\n              <div className={loginStyles.action}>\n                <Button type=\"submit\" className={classes.button}>\n                  Save\n                </Button>\n                <Button\n                  type=\"button\"\n                  className={classes.button}\n                  onClick={disableFormHandler}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Card>\n        )}\n      </Layout>\n    </div>\n  );\n}\nexport default MyProfile;\n","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/MyBookings.js",["114"],"import React from \"react\";\nimport classes from \"./MyBooking.module.css\";\nimport Layout from \"../layout/Layout\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport TicketList from \"./TicketList\";\nimport Modal from \"../UI/Modal\";\nimport Button from \"../UI/Button/Button\";\nimport ticketClasses from \"../UI/Button/Button.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nvar ticketId = null;\nfunction MyBookings() {\n\n  //************DECLARATIONS************//\n\n  const userEmail = useSelector((state) => state.login.userId);\n\n  const {\n    isLoading: bookingIsLoading,\n    sendRequest: sendBookingRequest,\n    response: bookingResponse,\n  } = useHttp();\n\n  const {\n    isLoading: cancelIsLoading,\n    sendRequest: sendCancelRequest,\n    response: cancelResponse,\n    resetError: resetCancelError,\n    resetResponse: resetCancelResponse,\n  } = useHttp();\n\n  const [showCancellationPrompt, setShowCancellationPrompt] = useState(false);\n\n  //************API CALLS************//\n\n  //Request to backend for bookings data\n  const fetchBookingDetails = async (requestJson) => {\n    sendBookingRequest({\n      url: \"https://space-ticket-booking-java.herokuapp.com/api/protected/fetchBookingDetails\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        userEmail: requestJson.userEmail,\n      },\n      errorMsg: \"Request failed!\",\n    });\n  };\n\n  //Request to backend for cancelling ticket\n  const cancelTicket = async (requestJson) => {\n    sendCancelRequest({\n      url: \"https://space-ticket-booking-java.herokuapp.com/api/protected/cancelTicket\",\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: {\n        bookingId: requestJson.ticketId,\n      },\n      errorMsg: \"Request failed!\",\n    });\n  };\n\n  //************ACTION HANDLERS************//\n\n  useEffect(() => {\n    const requestJson = { userEmail };\n    fetchBookingDetails(requestJson);\n  }, []);\n\n  function onTicketCancelHandler(id) {\n    ticketId = id;\n    setShowCancellationPrompt(true);\n  }\n\n  function cancellationHandler() {\n    const requestJson = {\n      ticketId,\n    };\n    cancelTicket(requestJson);\n    setShowCancellationPrompt(false);\n  }\n\n  function closeTicketCancelModal() {\n    setShowCancellationPrompt(false);\n    ticketId = null;\n  }\n\n  function recallFetchBooking() {\n    const requestJson = {\n      userEmail,\n    };\n    fetchBookingDetails(requestJson);\n    resetCancelResponse();\n    resetCancelError();\n  }\n\n  //************MODALS************//\n\n  const ticketCancelModalActions = (\n    <div className={classes.actions}>\n      <Button className={ticketClasses.button} onClick={cancellationHandler}>\n        Yes\n      </Button>\n      <Button className={ticketClasses.button} onClick={closeTicketCancelModal}>\n        No\n      </Button>\n    </div>\n  );\n\n  const ticketCancelModalContent = (\n    <React.Fragment>\n      <div className={classes.total}>\n        <span>ARE YOU SURE? REFUNDS CAN TAKE UP TO 5-7 DAYS.</span>\n      </div>\n    </React.Fragment>\n  );\n\n  const cancellationMessageActions = (\n    <div className={classes.actions}>\n      <Button className={ticketClasses.button} onClick={recallFetchBooking}>\n        Close\n      </Button>\n    </div>\n  );\n\n  const cancellationMessageContent = (\n    <React.Fragment>\n      <div className={classes.total}>\n        <span>{cancelResponse.responseMessage}</span>\n      </div>\n    </React.Fragment>\n  );\n\n  //************LOADING SPINNERS************//\n\n  if (bookingIsLoading) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (cancelIsLoading) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <Layout>\n      {showCancellationPrompt && (\n        <Modal>\n          {ticketCancelModalContent}\n          {ticketCancelModalActions}\n        </Modal>\n      )}\n      {cancelResponse.responseCode === 0 && (\n        <Modal>\n          {cancellationMessageContent}\n          {cancellationMessageActions}\n        </Modal>\n      )}\n      <TicketList\n        bookingList={bookingResponse}\n        cancellationHandler={onTicketCancelHandler}\n      />\n    </Layout>\n  );\n}\nexport default MyBookings;\n","/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/LoadingSpinner.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/Booking.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/ShipList.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Modal.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/TicketList.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Button/Button.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/CommonInput/Input.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/layout/Layout.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/hooks/use-http.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Card/Card.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/Ship.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/Tickets.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/layout/MainNavigation.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/UI/Card/ShipsCard.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Home/ShipDate.js",[],"/Users/shankarnarayanan/Documents/GitHub/space-ticket-booking-React/src/components/Ticket Booking/TicketDate.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":42,"column":6,"nodeType":"121","endLine":42,"endColumn":23,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":48,"column":6,"nodeType":"121","endLine":48,"endColumn":23,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"125","line":73,"column":6,"nodeType":"121","endLine":73,"endColumn":8,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":165,"column":6,"nodeType":"121","endLine":165,"endColumn":8,"suggestions":"128"},{"ruleId":"119","severity":1,"message":"129","line":189,"column":6,"nodeType":"121","endLine":189,"endColumn":46,"suggestions":"130"},{"ruleId":"119","severity":1,"message":"131","line":196,"column":6,"nodeType":"121","endLine":196,"endColumn":36,"suggestions":"132"},{"ruleId":"119","severity":1,"message":"133","line":73,"column":6,"nodeType":"121","endLine":73,"endColumn":8,"suggestions":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'now'. Either include them or remove the dependency array.","ArrayExpression",["137"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["138"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["139"],"React Hook useEffect has missing dependencies: 'FetchProfileHandler' and 'userEmail'. Either include them or remove the dependency array.",["140"],"React Hook useEffect has a missing dependency: 'saveResponse.responseCode'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has missing dependencies: 'FetchProfileHandler', 'saveResponse.responseCode', and 'userEmail'. Either include them or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'fetchBookingDetails' and 'userEmail'. Either include them or remove the dependency array.",["143"],"no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [isAuthenticated, navigate, now]",{"range":"158","text":"159"},"Update the dependencies array to be: [isAuthenticated, navigate]",{"range":"160","text":"161"},"Update the dependencies array to be: [dispatch]",{"range":"162","text":"163"},"Update the dependencies array to be: [FetchProfileHandler, userEmail]",{"range":"164","text":"165"},"Update the dependencies array to be: [saveResponse.responseMessage, navigate, saveResponse.responseCode]",{"range":"166","text":"167"},"Update the dependencies array to be: [FetchProfileHandler, saveResponse.responseCode, saveResponse.responseMessage, userEmail]",{"range":"168","text":"169"},"Update the dependencies array to be: [fetchBookingDetails, userEmail]",{"range":"170","text":"171"},[1404,1421],"[isAuthenticated, navigate, now]",[1510,1527],"[isAuthenticated, navigate]",[2319,2321],"[dispatch]",[4659,4661],"[FetchProfileHandler, userEmail]",[5086,5126],"[saveResponse.responseMessage, navigate, saveResponse.responseCode]",[5287,5317],"[FetchProfileHandler, saveResponse.responseCode, saveResponse.responseMessage, userEmail]",[2058,2060],"[fetchBookingDetails, userEmail]"]