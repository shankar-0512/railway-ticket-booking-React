[{"D:\\React JS\\space-ticket-booking-app\\src\\index.js":"1","D:\\React JS\\space-ticket-booking-app\\src\\store\\index.js":"2","D:\\React JS\\space-ticket-booking-app\\src\\App.js":"3","D:\\React JS\\space-ticket-booking-app\\src\\store\\login-slice.js":"4","D:\\React JS\\space-ticket-booking-app\\src\\components\\Authentication\\Login.js":"5","D:\\React JS\\space-ticket-booking-app\\src\\components\\Profile\\MyProfile.js":"6","D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\Home.js":"7","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\LoadingSpinner.js":"8","D:\\React JS\\space-ticket-booking-app\\src\\components\\CommonInput\\Input.js":"9","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Modal.js":"10","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Card\\Card.js":"11","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Button\\Button.js":"12","D:\\React JS\\space-ticket-booking-app\\src\\components\\layout\\Layout.js":"13","D:\\React JS\\space-ticket-booking-app\\src\\hooks\\use-http.js":"14","D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\ShipList.js":"15","D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\Ship.js":"16","D:\\React JS\\space-ticket-booking-app\\src\\components\\layout\\MainNavigation.js":"17","D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\ShipDate.js":"18","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Card\\ShipsCard.js":"19","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\Booking.js":"20","D:\\React JS\\space-ticket-booking-app\\src\\store\\userInputsSlice.js":"21","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\MyBookings.js":"22","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\Tickets.js":"23","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\TicketDate.js":"24","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\TicketList.js":"25"},{"size":358,"mtime":1648894975698,"results":"26","hashOfConfig":"27"},{"size":281,"mtime":1654760280775,"results":"28","hashOfConfig":"27"},{"size":2835,"mtime":1654939516280,"results":"29","hashOfConfig":"27"},{"size":558,"mtime":1651562717200,"results":"30","hashOfConfig":"27"},{"size":14474,"mtime":1655543260792,"results":"31","hashOfConfig":"27"},{"size":14407,"mtime":1655544357987,"results":"32","hashOfConfig":"27"},{"size":9573,"mtime":1655543020963,"results":"33","hashOfConfig":"27"},{"size":167,"mtime":1636032270000,"results":"34","hashOfConfig":"27"},{"size":816,"mtime":1654338706470,"results":"35","hashOfConfig":"27"},{"size":738,"mtime":1620731294000,"results":"36","hashOfConfig":"27"},{"size":218,"mtime":1616593928000,"results":"37","hashOfConfig":"27"},{"size":373,"mtime":1654160003768,"results":"38","hashOfConfig":"27"},{"size":314,"mtime":1651568853045,"results":"39","hashOfConfig":"27"},{"size":1370,"mtime":1650713094098,"results":"40","hashOfConfig":"27"},{"size":594,"mtime":1654162008632,"results":"41","hashOfConfig":"27"},{"size":967,"mtime":1654162312508,"results":"42","hashOfConfig":"27"},{"size":1674,"mtime":1655204667716,"results":"43","hashOfConfig":"27"},{"size":252,"mtime":1655089781384,"results":"44","hashOfConfig":"27"},{"size":288,"mtime":1651331331928,"results":"45","hashOfConfig":"27"},{"size":14091,"mtime":1655532317542,"results":"46","hashOfConfig":"27"},{"size":593,"mtime":1654767130933,"results":"47","hashOfConfig":"27"},{"size":4601,"mtime":1655531869948,"results":"48","hashOfConfig":"27"},{"size":1026,"mtime":1655472145751,"results":"49","hashOfConfig":"27"},{"size":577,"mtime":1655094915323,"results":"50","hashOfConfig":"27"},{"size":839,"mtime":1655472103851,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"xs5hek",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\React JS\\space-ticket-booking-app\\src\\index.js",[],["108","109"],"D:\\React JS\\space-ticket-booking-app\\src\\store\\index.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\App.js",["110","111"],"import { Route, Routes, Navigate, Link, useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { loginActions } from \"./store/login-slice\";\nimport { useDispatch } from \"react-redux\";\nimport Login from \"./components/Authentication/Login\";\nimport classes from \"./components/UI/Button/Button.module.css\";\nimport { useState, useEffect } from \"react\";\nimport Home from \"./components/Home/Home\";\nimport MyProfile from \"./components/Profile/MyProfile\";\nimport Booking from \"./components/Ticket Booking/Booking\";\nimport MyBookings from \"./components/Ticket Booking/MyBookings\";\n\nfunction App() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [signUpFlag, setSignUpFlag] = useState(true);\n  const [navigateLoginF, setNavigateLoginF] = useState(true);\n\n  const isAuthenticated = useSelector((state) => state.login.isAuthenticated);\n\n  function postSignUpHandler() {\n    setSignUpFlag(true);\n    setNavigateLoginF(true);\n  }\n\n  function resetNavigateLoginF() {\n    setNavigateLoginF(false);\n  }\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate(\"/home\");\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      navigate(\"/login\");\n    }\n  }, [isAuthenticated]);\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"isLoggedIn\");\n    const userId = localStorage.getItem(\"userId\");\n    if (loggedInUser) {\n      dispatch(loginActions.LoginStateHandler());\n      dispatch(loginActions.UpdateUserId(userId));\n    }\n  }, [dispatch]);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Navigate replace to=\"/login\" />} />\n      <Route path=\"/login\" element={<Login />}>\n        <Route\n          path=\"\"\n          element={\n            <Link\n              style={{ textDecoration: \"none\" }}\n              className={classes.button}\n              to={\"/signUp\"}\n              onClick={resetNavigateLoginF}\n            >\n              New User?\n            </Link>\n          }\n        />\n      </Route>\n      <Route\n        path=\"/signUp\"\n        element={\n          <Login\n            signUpFlag={signUpFlag}\n            postSignUp={postSignUpHandler}\n            loginF={navigateLoginF}\n          />\n        }\n      >\n        <Route\n          path=\"\"\n          element={\n            <Link\n              style={{ textDecoration: \"none\" }}\n              className={classes.button}\n              to={\"/login\"}\n              onClick={postSignUpHandler}\n            >\n              Back\n            </Link>\n          }\n        />\n      </Route>\n      <Route path=\"/home\" element={<Home />} />\n      <Route path=\"/home/myProfile\" element={<MyProfile />} />\n      <Route path=\"/home/booking/:shipId\" element={<Booking />} />\n      <Route path=\"/home/myBookings\" element={<MyBookings />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","D:\\React JS\\space-ticket-booking-app\\src\\store\\login-slice.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Authentication\\Login.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Profile\\MyProfile.js",["112","113","114","115","116","117"],"import React from \"react\";\r\nimport Layout from \"../layout/Layout\";\r\nimport classes from \"./MyProfile.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport moment from \"moment\";\r\nimport styles from \"../CommonInput/Input.module.css\";\r\nimport Card from \"../UI/Card/Card\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport Input from \"../CommonInput/Input\";\r\nimport loginStyles from \"../Authentication/Login.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Modal from \"../UI/Modal\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nvar pswCode = null;\r\nvar pswMessage = null;\r\nfunction MyProfile() {\r\n  //************DECLARATIONS************//\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const {\r\n    isLoading: fetchIsLoading,\r\n    error: fetchError,\r\n    sendRequest: sendFetchRequest,\r\n    response: fetchResponse,\r\n    resetError: fetchResetError,\r\n    resetResponse: fetchResetResponse,\r\n  } = useHttp();\r\n\r\n  const {\r\n    isLoading: saveIsLoading,\r\n    error: saveError,\r\n    sendRequest: sendSaveRequest,\r\n    response: saveResponse,\r\n    resetError: saveResetError,\r\n    resetResponse: saveResetResponse,\r\n  } = useHttp();\r\n\r\n  const {\r\n    isLoading: pswIsLoading,\r\n    error: pswError,\r\n    sendRequest: sendPasswordRequest,\r\n    response: pswResponse,\r\n    resetError: resetPswError,\r\n    resetResponse: resetPswResponse,\r\n  } = useHttp();\r\n\r\n  //STATES\r\n  const [enableForm, setEnableForm] = useState(false);\r\n  const [userName, setUserName] = useState(fetchResponse.userName);\r\n  const [basePlanet, setBasePlanet] = useState(fetchResponse.basePlanet);\r\n  const [dob, setDob] = useState(fetchResponse.dob);\r\n  const [oldPsw, setOldPsw] = useState(\"\");\r\n  const [newPsw, setNewPsw] = useState(\"\");\r\n  const [confirmNewPsw, setConfirmNewPsw] = useState(\"\");\r\n  const [changePassword, setChangePassword] = useState(false);\r\n  const userEmail = useSelector((state) => state.login.userId);\r\n\r\n  //REFS\r\n  const nameInputRef = useRef();\r\n  const planetInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n  const oldPswInputRef = useRef();\r\n  const newPswInputRef = useRef();\r\n  const confirmNewPswInputRef = useRef();\r\n\r\n  //************API CALLS************//\r\n\r\n  //Request to backend for profile data\r\n  const FetchProfileHandler = async (requestJson) => {\r\n    sendFetchRequest({\r\n      url: \"http://localhost:8080/api/protected/fetchProfileDetails\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        email: requestJson.userEmail,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //Request to backend for profile data\r\n  const saveEditMode = async (requestJson) => {\r\n    sendSaveRequest({\r\n      url: \"http://localhost:8080/api/protected/saveUserDetails\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        email: requestJson.userEmail,\r\n        name: requestJson.userName,\r\n        basePlanet: requestJson.basePlanet,\r\n        dob: requestJson.dob,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //Request to backend for changing password\r\n  const ChangePasswordHandler = async (requestJson) => {\r\n    sendPasswordRequest({\r\n      url: \"http://localhost:8080/api/protected/changePassword\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        userEmail: requestJson.userEmail,\r\n        oldPassword: requestJson.oldPsw,\r\n        newPassword: requestJson.newPsw,\r\n        confirmNewPassword: requestJson.confirmNewPsw,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //************STATE HANDLERS************//\r\n\r\n  function onEditHandler() {\r\n    setEnableForm(true);\r\n  }\r\n\r\n  function disableFormHandler() {\r\n    setEnableForm(false);\r\n  }\r\n\r\n  function nameChangeHandler(event) {\r\n    setUserName(event.target.value);\r\n  }\r\n\r\n  function planetChangeHandler(event) {\r\n    setBasePlanet(event.target.value);\r\n  }\r\n\r\n  function dateChangeHandler(event) {\r\n    setDob(event.target.value);\r\n  }\r\n\r\n  function oldPswChangeHandler(event) {\r\n    setOldPsw(event.target.value);\r\n  }\r\n\r\n  function newPswChangeHandler(event) {\r\n    setNewPsw(event.target.value);\r\n  }\r\n\r\n  function confirmNewPswChangeHandler(event) {\r\n    setConfirmNewPsw(event.target.value);\r\n  }\r\n\r\n  //************ACTION HANDLERS************//\r\n\r\n  useEffect(() => {\r\n    setUserName(fetchResponse.userName);\r\n    setBasePlanet(fetchResponse.basePlanet);\r\n    setDob(fetchResponse.dob);\r\n  }, [fetchResponse.userName, fetchResponse.basePlanet, fetchResponse.dob]);\r\n\r\n  useEffect(() => {\r\n    const requestJson = { userEmail };\r\n    FetchProfileHandler(requestJson);\r\n  }, []);\r\n\r\n  function EditModeSubmitHandler(event) {\r\n    event.preventDefault();\r\n    const requestJson = {\r\n      userEmail,\r\n      userName,\r\n      basePlanet,\r\n      dob,\r\n    };\r\n\r\n    saveEditMode(requestJson);\r\n  }\r\n\r\n  function navigateBack() {\r\n    disableFormHandler();\r\n    navigate(\"/home\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (saveResponse.responseCode === 0) {\r\n      disableFormHandler();\r\n      navigate(\"/home/myProfile\");\r\n    }\r\n  }, [saveResponse.responseMessage, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (saveResponse.responseCode === 0) {\r\n      const fetchRequest = { userEmail };\r\n      FetchProfileHandler(fetchRequest);\r\n    }\r\n  }, [saveResponse.responseMessage]);\r\n\r\n  function closeErrorModal() {\r\n    saveResetError();\r\n    saveResetResponse();\r\n    console.log(saveResponse.responseMessage);\r\n    if (saveResponse.responseMessage === undefined) {\r\n      navigate(\"/home\");\r\n    }\r\n  }\r\n\r\n  function resetPasswordResponses() {\r\n    resetPswError();\r\n    resetPswResponse();\r\n  }\r\n\r\n  function closePswMsgModal() {\r\n    if (pswCode === 1) {\r\n      setChangePassword(true);\r\n    } else if (pswCode === 0) {\r\n      pswCode = null;\r\n      pswMessage = null;\r\n      navigate(\"/home\");\r\n    }\r\n  }\r\n\r\n  function changePasswordSubmitHandler() {\r\n    setChangePassword(true);\r\n  }\r\n\r\n  function closeChangePswModal() {\r\n    setChangePassword(false);\r\n    resetPasswordResponses();\r\n  }\r\n\r\n  function onChangePassword(event) {\r\n    event.preventDefault();\r\n\r\n    const requestJson = {\r\n      userEmail,\r\n      oldPsw,\r\n      newPsw,\r\n      confirmNewPsw,\r\n    };\r\n    ChangePasswordHandler(requestJson);\r\n  }\r\n\r\n  if (pswResponse.responseCode !== undefined) {\r\n    pswCode = pswResponse.responseCode;\r\n    pswMessage = pswResponse.responseMessage;\r\n    setChangePassword(false);\r\n    resetPasswordResponses();\r\n  }\r\n\r\n  //************MODALS************//\r\n\r\n  const modalActions = (\r\n    <div className={classes.actions}>\r\n      <Button className={classes.btn} onClick={closeErrorModal}>\r\n        Close\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const saveModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>{saveResponse.responseMessage}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const passwordModalActions = (\r\n    <div className={classes.actions}>\r\n      <Button className={classes.btn} onClick={closePswMsgModal}>\r\n        Okay\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const passwordModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>\r\n          {pswResponse.responseMessage}\r\n          {pswMessage}\r\n        </span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const ChangePasswordModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <form onSubmit={onChangePassword}>\r\n          <Input\r\n            ref={oldPswInputRef}\r\n            id=\"oldPsw\"\r\n            label=\"Old Password :\"\r\n            type=\"password\"\r\n            value={oldPsw}\r\n            onChange={oldPswChangeHandler}\r\n          />\r\n          <Input\r\n            ref={newPswInputRef}\r\n            id=\"newPsw\"\r\n            label=\"New Password :\"\r\n            type=\"password\"\r\n            value={newPsw}\r\n            onChange={newPswChangeHandler}\r\n          />\r\n          <Input\r\n            ref={confirmNewPswInputRef}\r\n            id=\"conNewPsw\"\r\n            label=\"Confirm New Password :\"\r\n            type=\"password\"\r\n            value={confirmNewPsw}\r\n            onChange={confirmNewPswChangeHandler}\r\n          />\r\n          <Button className={classes.button} type=\"submit\">\r\n            Submit\r\n          </Button>\r\n          <Button\r\n            className={classes.button}\r\n            type=\"button\"\r\n            onClick={closeChangePswModal}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  //************LOADING SPINNERS************//\r\n\r\n  if (fetchIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (saveIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (pswIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        {changePassword && <Modal>{ChangePasswordModalContent}</Modal>}\r\n        {(pswError ||\r\n          pswResponse.responseCode !== undefined ||\r\n          pswCode === 0) && (\r\n          <Modal>\r\n            {passwordModalContent}\r\n            {passwordModalActions}\r\n          </Modal>\r\n        )}\r\n        {(saveError || saveResponse.responseCode !== undefined) && (\r\n          <Modal>\r\n            {saveModalContent}\r\n            {modalActions}\r\n          </Modal>\r\n        )}\r\n        {!enableForm && (\r\n          <div>\r\n            <h2 className={classes.h2Profile}>My Profile</h2>\r\n            <div className={classes.control}>\r\n              <label>Name : </label>\r\n              <label>{fetchResponse.userName}</label>\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label>E-Mail : </label>\r\n              <label>{fetchResponse.userEmail}</label>\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label>Password : </label>\r\n              <label>{fetchResponse.userPassword}</label>\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label>Base Planet : </label>\r\n              <label>{fetchResponse.basePlanet}</label>\r\n            </div>\r\n            <div className={classes.control}>\r\n              <label>Date of Birth : </label>\r\n              <label>{fetchResponse.dob}</label>\r\n            </div>\r\n            <div className={loginStyles.action}>\r\n              <Button\r\n                type=\"button\"\r\n                className={classes.button}\r\n                onClick={onEditHandler}\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                className={classes.button}\r\n                onClick={changePasswordSubmitHandler}\r\n              >\r\n                Change Password\r\n              </Button>\r\n              <Button\r\n                type=\"button\"\r\n                className={classes.button}\r\n                onClick={navigateBack}\r\n              >\r\n                Back\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {enableForm && (\r\n          <Card className={loginStyles.login}>\r\n            <form onSubmit={EditModeSubmitHandler}>\r\n              <Input\r\n                ref={nameInputRef}\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                type=\"text\"\r\n                value={userName}\r\n                onChange={nameChangeHandler}\r\n              />\r\n              <div className={styles.control}>\r\n                <label>Base Planet</label>\r\n                <select\r\n                  ref={planetInputRef}\r\n                  className={loginStyles.select}\r\n                  name=\"planetList\"\r\n                  id=\"planets\"\r\n                  value={basePlanet}\r\n                  onChange={planetChangeHandler}\r\n                >\r\n                  <option value=\"\" style={{ color: \"grey\" }}>\r\n                    Select an Option\r\n                  </option>\r\n                  <option value=\"Earth\" style={{ color: \"black\" }}>\r\n                    Earth\r\n                  </option>\r\n                  <option value=\"Mars\" style={{ color: \"black\" }}>\r\n                    Mars\r\n                  </option>\r\n                  <option value=\"Moon\" style={{ color: \"black\" }}>\r\n                    Moon\r\n                  </option>\r\n                  <option value=\"Ceres\" style={{ color: \"black\" }}>\r\n                    Ceres\r\n                  </option>\r\n                  <option value=\"Europa\" style={{ color: \"black\" }}>\r\n                    Europa\r\n                  </option>\r\n                  <option value=\"Titan\" style={{ color: \"black\" }}>\r\n                    Titan\r\n                  </option>\r\n                  <option value=\"EB-15\" style={{ color: \"black\" }}>\r\n                    EB-15\r\n                  </option>\r\n                  <option value=\"ISS\" style={{ color: \"black\" }}>\r\n                    ISS\r\n                  </option>\r\n                  <option value=\"Kepler-186F\" style={{ color: \"black\" }}>\r\n                    Kepler-186F\r\n                  </option>\r\n                </select>\r\n              </div>\r\n              <div className={styles.control}>\r\n                <label htmlFor=\"date\">Date of Birth</label>\r\n                <input\r\n                  ref={dateInputRef}\r\n                  id=\"date\"\r\n                  label=\"Date of Birth\"\r\n                  type=\"date\"\r\n                  value={dob}\r\n                  onChange={dateChangeHandler}\r\n                  max={moment().format(\"YYYY-MM-DD\")}\r\n                ></input>\r\n              </div>\r\n              <div className={loginStyles.action}>\r\n                <Button type=\"submit\" className={classes.button}>\r\n                  Save\r\n                </Button>\r\n                <Button\r\n                  type=\"button\"\r\n                  className={classes.button}\r\n                  onClick={disableFormHandler}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </Card>\r\n        )}\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\nexport default MyProfile;\r\n","D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\Home.js",["118","119","120"],"import Layout from \"../layout/Layout\";\r\nimport { useRef, useState } from \"react\";\r\nimport classes from \"../Home/Home.module.css\";\r\nimport styles from \"../CommonInput/Input.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport ShipList from \"./ShipList\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport moment from \"moment\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { userInputActions } from \"../../store/userInputsSlice\"\r\n\r\nfunction Home() {\r\n\r\n  //************DECLARATIONS************//\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  //STATES\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    from: true,\r\n    to: true,\r\n    toNotMatching: true,\r\n    class: true,\r\n    date: true,\r\n  });\r\n\r\n  //REFS\r\n  const fromInputRef = useRef();\r\n  const toInputRef = useRef();\r\n  const classInputRef = useRef();\r\n  const dateInputRef = useRef();\r\n\r\n  const {\r\n    isLoading,\r\n    error,\r\n    sendRequest: sendTaskRequest,\r\n    response,\r\n    resetError,\r\n    resetResponse,\r\n  } = useHttp();\r\n\r\n  //************API CALLS************//\r\n\r\n  //Request to backend for login and sign-up\r\n  const SearchShipsHandler = async (requestJson) => {\r\n    sendTaskRequest({\r\n      url: \"http://localhost:8080/api/protected/searchShips\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        from: requestJson.enteredFrom,\r\n        to: requestJson.enteredTo,\r\n        shipClass: requestJson.enteredClass,\r\n        journeyDate: requestJson.enteredDate,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //************ACTION HANDLERS************//\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const enteredFrom = fromInputRef.current.value;\r\n    const enteredTo = toInputRef.current.value;\r\n    const enteredClass = classInputRef.current.value;\r\n    const enteredDate = dateInputRef.current.value;\r\n\r\n    const enteredFromIsValid = enteredFrom.trim() !== \"none\";\r\n    const enteredToIsValid = enteredTo.trim() !== \"\";\r\n    const enteredToIsNotMatching = enteredTo.trim() !== enteredFrom.trim();\r\n    const enteredClassIsValid = enteredClass.trim() !== \"\";\r\n    const enteredDateIsValid = enteredDate.trim() !== \"\";\r\n\r\n    setFormInputsValidity({\r\n      from: enteredFromIsValid,\r\n      to: enteredToIsValid,\r\n      toNotMatching: enteredToIsNotMatching,\r\n      class: enteredClassIsValid,\r\n      date: enteredDateIsValid,\r\n    });\r\n\r\n    const formIsValid =\r\n      enteredFromIsValid &&\r\n      enteredToIsValid &&\r\n      enteredClassIsValid &&\r\n      enteredToIsNotMatching &&\r\n      enteredDateIsValid;\r\n\r\n    if (formIsValid) {\r\n      const requestJson = {\r\n        enteredFrom,\r\n        enteredTo,\r\n        enteredClass,\r\n        enteredDate,\r\n      };\r\n\r\n      dispatch(userInputActions.UpdateUserInputs({\r\n        from : enteredFrom,\r\n        to : enteredTo,\r\n        class : enteredClass,\r\n        journeyDate : enteredDate,\r\n      }));\r\n\r\n      setFormInputsValidity({\r\n        from: true,\r\n        to: true,\r\n        toNotMatching: true,\r\n        class: true,\r\n        date: true,\r\n      });\r\n      SearchShipsHandler(requestJson);\r\n      fromInputRef.current.value = \"none\";\r\n      toInputRef.current.value = \"\";\r\n      classInputRef.current.value = \"\";\r\n      dateInputRef.current.value = \"\";\r\n    }\r\n  }\r\n\r\n  const fromControlClasses = `${styles.control} ${\r\n    formInputsValidity.from === true ? \"\" : styles.invalid\r\n  }`;\r\n  const toControlClasses = `${styles.control} ${\r\n    formInputsValidity.to === true ? \"\" : styles.invalid\r\n  }`;\r\n  const classControlClasses = `${styles.control} ${\r\n    formInputsValidity.class === true ? \"\" : styles.invalid\r\n  }`;\r\n  const dateControlClasses = `${styles.control} ${\r\n    formInputsValidity.date === true ? \"\" : styles.invalid\r\n  }`;\r\n\r\n  //************LOADING SPINNERS************//\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <section className={classes.summary}>\r\n          <h3 className={classes.heading}>Book a Ship</h3>\r\n          <form onSubmit={submitHandler}>\r\n            {!formInputsValidity.from && (\r\n              <p className={classes.error}>Please select an Origin!</p>\r\n            )}\r\n            <div className={fromControlClasses}>\r\n              <label>From</label>\r\n              <select\r\n                ref={fromInputRef}\r\n                className={classes.select}\r\n                name=\"fromList\"\r\n                id=\"from\"\r\n              >\r\n                <option value=\"none\" style={{ color: \"grey\" }}>\r\n                  Select an Option\r\n                </option>\r\n                <option value=\"Earth\" style={{ color: \"black\" }}>\r\n                  Earth\r\n                </option>\r\n                <option value=\"Mars\" style={{ color: \"black\" }}>\r\n                  Mars\r\n                </option>\r\n                <option value=\"Moon\" style={{ color: \"black\" }}>\r\n                  Moon\r\n                </option>\r\n                <option value=\"Ceres\" style={{ color: \"black\" }}>\r\n                  Ceres\r\n                </option>\r\n                <option value=\"Europa\" style={{ color: \"black\" }}>\r\n                  Europa\r\n                </option>\r\n                <option value=\"Titan\" style={{ color: \"black\" }}>\r\n                  Titan\r\n                </option>\r\n                <option value=\"EB-15\" style={{ color: \"black\" }}>\r\n                  EB-15\r\n                </option>\r\n                <option value=\"ISS\" style={{ color: \"black\" }}>\r\n                  ISS\r\n                </option>\r\n                <option value=\"Kepler-186F\" style={{ color: \"black\" }}>\r\n                  Kepler-186F\r\n                </option>\r\n              </select>\r\n            </div>\r\n            {!formInputsValidity.to && (\r\n              <p className={classes.error}>Please select a Destination!</p>\r\n            )}\r\n            {!formInputsValidity.toNotMatching && (\r\n              <p className={classes.error}>\r\n                Destination cannot be the same as From!\r\n              </p>\r\n            )}\r\n            <div className={toControlClasses}>\r\n              <label>To</label>\r\n              <select\r\n                ref={toInputRef}\r\n                className={classes.select}\r\n                name=\"toList\"\r\n                id=\"to\"\r\n              >\r\n                <option value=\"\" style={{ color: \"grey\" }}>\r\n                  Select an Option\r\n                </option>\r\n                <option value=\"Earth\" style={{ color: \"black\" }}>\r\n                  Earth\r\n                </option>\r\n                <option value=\"Mars\" style={{ color: \"black\" }}>\r\n                  Mars\r\n                </option>\r\n                <option value=\"Moon\" style={{ color: \"black\" }}>\r\n                  Moon\r\n                </option>\r\n                <option value=\"Ceres\" style={{ color: \"black\" }}>\r\n                  Ceres\r\n                </option>\r\n                <option value=\"Europa\" style={{ color: \"black\" }}>\r\n                  Europa\r\n                </option>\r\n                <option value=\"Titan\" style={{ color: \"black\" }}>\r\n                  Titan\r\n                </option>\r\n                <option value=\"EB-15\" style={{ color: \"black\" }}>\r\n                  EB-15\r\n                </option>\r\n                <option value=\"ISS\" style={{ color: \"black\" }}>\r\n                  ISS\r\n                </option>\r\n                <option value=\"Kepler-186F\" style={{ color: \"black\" }}>\r\n                  Kepler-186F\r\n                </option>\r\n              </select>\r\n            </div>\r\n            {!formInputsValidity.class && (\r\n              <p className={classes.error}>Please select a Class!</p>\r\n            )}\r\n            <div className={classControlClasses}>\r\n              <label>Class</label>\r\n              <select\r\n                ref={classInputRef}\r\n                className={classes.select}\r\n                name=\"classList\"\r\n                id=\"class\"\r\n              >\r\n                <option value=\"\" style={{ color: \"grey\" }}>\r\n                  Select an Option\r\n                </option>\r\n                <option value=\"Economy\" style={{ color: \"black\" }}>\r\n                  Economy\r\n                </option>\r\n                <option value=\"Premium\" style={{ color: \"black\" }}>\r\n                  Premium\r\n                </option>\r\n                <option value=\"Executive\" style={{ color: \"black\" }}>\r\n                  Executive\r\n                </option>\r\n              </select>\r\n            </div>\r\n            {!formInputsValidity.date && (\r\n              <p className={classes.error}>Please select the Journey Date!</p>\r\n            )}\r\n            <div className={dateControlClasses}>\r\n              <label htmlFor=\"date\">Journey Date</label>\r\n              <input\r\n                ref={dateInputRef}\r\n                id=\"date\"\r\n                label=\"Journey Date\"\r\n                type=\"date\"\r\n                min={moment().format(\"YYYY-MM-DD\")}\r\n              ></input>\r\n            </div>\r\n            <div className={classes.action}>\r\n              <Button type=\"submit\" className={classes.actions} >\r\n                Search Ships\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </section>\r\n      </Layout>\r\n      <section className={classes.ships}>\r\n        <div>\r\n          <ShipList ships={response} />\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\LoadingSpinner.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\CommonInput\\Input.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Modal.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Card\\Card.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Button\\Button.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\layout\\Layout.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\hooks\\use-http.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\ShipList.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\Ship.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\layout\\MainNavigation.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Home\\ShipDate.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\UI\\Card\\ShipsCard.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\Booking.js",["121"],"import React, { useState, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport classes from \"../Profile/MyProfile.module.css\";\r\nimport loginStyles from \"../Authentication/Login.module.css\";\r\nimport Input from \"../CommonInput/Input\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport Layout from \"../layout/Layout\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport styles from \"../Home/Home.module.css\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport Modal from \"../UI/Modal\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n//************GLOBAL VARIABLES************//\r\n\r\nvar form1IsValid = false;\r\nvar form2IsValid = false;\r\nvar formIsValid = false;\r\nvar otpRetries = 3;\r\n\r\nfunction Booking() {\r\n  //************DECLARATIONS************//\r\n\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem(\"userId\");\r\n\r\n  const params = useParams();\r\n  const { shipId } = params;\r\n\r\n  const boardingStation = useSelector((state) => state.user.from);\r\n  const arrivalStation = useSelector((state) => state.user.to);\r\n  const shipClass = useSelector((state) => state.user.class);\r\n  const journeyDate = useSelector((state) => state.user.journeyDate);\r\n\r\n  const {\r\n    isLoading: verifyIsLoading,\r\n    error: verifyError,\r\n    sendRequest: sendVerifyRequest,\r\n    response: verifyResponse,\r\n    resetError: resetVerifyError,\r\n    resetResponse: resetVerifyResponse,\r\n  } = useHttp();\r\n\r\n  const {\r\n    isLoading: otpIsLoading,\r\n    error: otpError,\r\n    sendRequest: sendOtpRequest,\r\n    response: otpResponse,\r\n    resetError: resetOtpError,\r\n    resetResponse: resetOtpResponse,\r\n  } = useHttp();\r\n\r\n  const {\r\n    isLoading: ticketIsLoading,\r\n    error: ticketError,\r\n    sendRequest: sendGenerateRequest,\r\n    response: ticketResponse,\r\n    resetError: resetTicketError,\r\n    resetResponse: resetTicketResponse,\r\n  } = useHttp();\r\n\r\n  //REFS\r\n  const nameInputRef = useRef();\r\n  const ageInputRef = useRef();\r\n  const emailInputRef = useRef();\r\n  const phoneInputRef = useRef();\r\n  const name2InputRef = useRef();\r\n  const age2InputRef = useRef();\r\n  const otpInputRef = useRef();\r\n\r\n  //STATES\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [age, setAge] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [user2Name, setUser2Name] = useState(\"\");\r\n  const [age2, setAge2] = useState(\"\");\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [passengerCount, setPassengerCount] = useState(1);\r\n  const [formInputsValidity, setFormInputsValidity] = useState({\r\n    userNameIsValid: true,\r\n    ageIsValid: true,\r\n    emailIsValid: true,\r\n    phoneNumberIsValid: true,\r\n    user2NameIsValid: true,\r\n    age2IsValid: true,\r\n  });\r\n\r\n  //STATE HANDLERS\r\n  function nameChangeHandler(event) {\r\n    setUserName(event.target.value);\r\n  }\r\n  function ageChangeHandler(event) {\r\n    setAge(event.target.value);\r\n  }\r\n  function emailChangeHandler(event) {\r\n    setEmail(event.target.value);\r\n  }\r\n  function phoneNumberChangeHandler(event) {\r\n    setPhoneNumber(event.target.value);\r\n  }\r\n  function name2ChangeHandler(event) {\r\n    setUser2Name(event.target.value);\r\n  }\r\n  function age2ChangeHandler(event) {\r\n    setAge2(event.target.value);\r\n  }\r\n  function otpChangeHandler(event) {\r\n    setOtp(event.target.value);\r\n  }\r\n\r\n  //************API CALLS************//\r\n\r\n  //Request to backend for verification email\r\n  const EmailVerification = async (requestJson) => {\r\n    sendVerifyRequest({\r\n      url: \"http://localhost:8080/api/protected/verifyUser\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        userEmail: requestJson.email,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //Request to backend for checking OTP\r\n  const OTPVerification = async (requestJson) => {\r\n    sendOtpRequest({\r\n      url: \"http://localhost:8080/api/protected/verifyOtp\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        otp: requestJson.otp,\r\n        userEmail: requestJson.email,\r\n        deleteFlag: requestJson.deleteFlag,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //Request to backend for generating E-Ticket\r\n  const generateETicket = async (requestJson) => {\r\n    sendGenerateRequest({\r\n      url: \"http://localhost:8080/api/protected/generateEticket\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        userName: requestJson.userName,\r\n        user2Name: requestJson.user2Name,\r\n        userEmail: requestJson.email,\r\n        userAge: requestJson.age,\r\n        user2Age: requestJson.age2,\r\n        shipId: requestJson.shipId,\r\n        shipClass: requestJson.shipClass,\r\n        boardingStation: requestJson.boardingStation,\r\n        arrivalStation: requestJson.arrivalStation,\r\n        journeyDate: requestJson.journeyDate,\r\n        userId: requestJson.userId,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //************ACTION HANDLERS************//\r\n\r\n  function onClickCancelHandler() {\r\n    navigate(\"/home\");\r\n  }\r\n\r\n  function onClickAddPassenger() {\r\n    setPassengerCount(passengerCount + 1);\r\n    console.log(formInputsValidity.user2NameIsValid);\r\n    console.log(formInputsValidity.userNameIsValid);\r\n  }\r\n\r\n  function bookingSubmitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const userNameValidity = userName.trim() !== \"\";\r\n    const ageValidity = age.trim() > 0;\r\n    const emailValidity = email.trim().includes(\"@\");\r\n    const phoneValidity = phoneNumber.trim() !== \"\";\r\n\r\n    setFormInputsValidity({\r\n      userNameIsValid: userNameValidity,\r\n      ageIsValid: ageValidity,\r\n      emailIsValid: emailValidity,\r\n      phoneNumberIsValid: phoneValidity,\r\n    });\r\n\r\n    form1IsValid =\r\n      userNameValidity && ageValidity && emailValidity && phoneValidity;\r\n\r\n    formIsValid = form1IsValid;\r\n\r\n    if (passengerCount === 2) {\r\n      const user2Validity = user2Name.trim() !== \"\";\r\n      const age2Validity = age2.trim() > 0;\r\n\r\n      setFormInputsValidity({\r\n        userNameIsValid: userNameValidity,\r\n        ageIsValid: ageValidity,\r\n        emailIsValid: emailValidity,\r\n        phoneNumberIsValid: phoneValidity,\r\n        user2NameIsValid: user2Validity,\r\n        age2IsValid: age2Validity,\r\n      });\r\n\r\n      form2IsValid =\r\n        userNameValidity &&\r\n        ageValidity &&\r\n        emailValidity &&\r\n        phoneValidity &&\r\n        user2Validity &&\r\n        age2Validity;\r\n\r\n      formIsValid = form1IsValid && form2IsValid;\r\n    }\r\n\r\n    if (formIsValid) {\r\n      setFormInputsValidity({\r\n        userNameIsValid: true,\r\n        ageIsValid: true,\r\n        emailIsValid: true,\r\n        phoneNumberIsValid: true,\r\n        user2NameIsValid: true,\r\n        age2IsValid: true,\r\n      });\r\n\r\n      const requestJson = { email };\r\n      EmailVerification(requestJson);\r\n    }\r\n  }\r\n\r\n  function otpSubmitHandler(event) {\r\n    event.preventDefault();\r\n\r\n    const requestJson = { otp, email };\r\n    OTPVerification(requestJson);\r\n    otpRetries = otpRetries - 1;\r\n  }\r\n\r\n  function closeTicketErrorModal() {\r\n    resetTicketResponse();\r\n    navigate(\"/home\");\r\n  }\r\n\r\n  function resetOtp() {\r\n    resetOtpError();\r\n    resetOtpResponse();\r\n  }\r\n\r\n  function retryOtpErrorModal() {\r\n    resetOtp();\r\n  }\r\n\r\n  function closeOtpErrorModal() {\r\n    resetOtp();\r\n    otpRetries = 3;\r\n    closeTicketErrorModal();\r\n    const requestJson = {\r\n      email,\r\n      deleteFlag: \"Y\",\r\n    };\r\n    OTPVerification(requestJson);\r\n  }\r\n\r\n  if (otpResponse.responseCode === 0) {\r\n    const requestJson = {\r\n      userName,\r\n      user2Name,\r\n      email,\r\n      age,\r\n      age2,\r\n      shipId,\r\n      shipClass,\r\n      boardingStation,\r\n      arrivalStation,\r\n      journeyDate,\r\n      userId,\r\n    };\r\n\r\n    generateETicket(requestJson);\r\n    resetOtpResponse();\r\n    resetVerifyError();\r\n    resetVerifyResponse();\r\n  }\r\n\r\n  const ticketModalActions = (\r\n    <div className={classes.actions}>\r\n      <Button className={classes.btn} onClick={closeTicketErrorModal}>\r\n        Okay\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const otpModalActions = (\r\n    <div className={classes.actions}>\r\n      {otpRetries !== 0 && (\r\n        <Button className={classes.btn} onClick={retryOtpErrorModal}>\r\n          Retry({otpRetries})\r\n        </Button>\r\n      )}\r\n      {otpRetries === 0 && (\r\n        <Button className={classes.btn} onClick={closeOtpErrorModal}>\r\n          Close\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  //************MODALS************//\r\n\r\n  const ticketModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>{ticketResponse.responseMessage}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const otpFailureModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>{otpResponse.responseMessage}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const BookingModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <form onSubmit={otpSubmitHandler}>\r\n          <Input\r\n            ref={otpInputRef}\r\n            id=\"otp\"\r\n            label=\"Please enter your OTP :\"\r\n            type=\"number\"\r\n            value={otp}\r\n            onChange={otpChangeHandler}\r\n          />\r\n          <Button className={classes.btn} type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  //************LOADING SPINNERS************//\r\n\r\n  if (verifyIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h2>Please wait, Sending verification mail...</h2>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (otpIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h2>Verifying...</h2>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (ticketIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h2>Making your Reservation, please do not leave this page...</h2>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {(verifyError ||\r\n        (verifyResponse.responseCode === 0 &&\r\n          otpResponse.responseCode !== 1)) && (\r\n        <Modal onClose={null}>{BookingModalContent}</Modal>\r\n      )}\r\n      {(ticketError || ticketResponse.responseCode === 0) && (\r\n        <Modal onClose={null}>\r\n          {ticketModalContent}\r\n          {ticketModalActions}\r\n        </Modal>\r\n      )}\r\n      {(otpError || otpResponse.responseCode === 1) && (\r\n        <Modal onClose={null}>\r\n          {otpFailureModalContent}\r\n          {otpModalActions}\r\n        </Modal>\r\n      )}\r\n      <section className={styles.summary}>\r\n        <form onSubmit={bookingSubmitHandler}>\r\n          <h3 className={classes.h2}>Passenger 1 - Details</h3>\r\n          {!formInputsValidity.userNameIsValid && (\r\n            <p className={styles.error}>Please enter your Name.</p>\r\n          )}\r\n          <Input\r\n            ref={nameInputRef}\r\n            id=\"name1\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={userName}\r\n            onChange={nameChangeHandler}\r\n          />\r\n          {!formInputsValidity.ageIsValid && (\r\n            <p className={styles.error}>Please enter your Age.</p>\r\n          )}\r\n          <Input\r\n            ref={ageInputRef}\r\n            id=\"age1\"\r\n            label=\"Age\"\r\n            type=\"number\"\r\n            value={age}\r\n            onChange={ageChangeHandler}\r\n          />\r\n          {!formInputsValidity.emailIsValid && (\r\n            <p className={styles.error}>Please enter your Email.</p>\r\n          )}\r\n          <Input\r\n            ref={emailInputRef}\r\n            id=\"email\"\r\n            label=\"Email\"\r\n            type=\"text\"\r\n            value={email}\r\n            onChange={emailChangeHandler}\r\n          />\r\n          {!formInputsValidity.phoneNumberIsValid && (\r\n            <p className={styles.error}>Please enter your Mobile Number.</p>\r\n          )}\r\n          <Input\r\n            ref={phoneInputRef}\r\n            id=\"phoneNumber\"\r\n            label=\"Mobile\"\r\n            type=\"number\"\r\n            value={phoneNumber}\r\n            onChange={phoneNumberChangeHandler}\r\n          />\r\n          {passengerCount === 2 && (\r\n            <h3 className={classes.h2}>Passenger 2 - Details</h3>\r\n          )}\r\n\r\n          {passengerCount === 2 && !formInputsValidity.user2NameIsValid && (\r\n            <p className={styles.error}>Please enter your Name.</p>\r\n          )}\r\n          {passengerCount === 2 && (\r\n            <Input\r\n              ref={name2InputRef}\r\n              id=\"name2\"\r\n              label=\"Name\"\r\n              type=\"text\"\r\n              value={user2Name}\r\n              onChange={name2ChangeHandler}\r\n            />\r\n          )}\r\n          {passengerCount === 2 && !formInputsValidity.age2IsValid && (\r\n            <p className={styles.error}>Please enter your Age.</p>\r\n          )}\r\n          {passengerCount === 2 && (\r\n            <Input\r\n              ref={age2InputRef}\r\n              id=\"age2\"\r\n              label=\"Age\"\r\n              type=\"number\"\r\n              value={age2}\r\n              onChange={age2ChangeHandler}\r\n            />\r\n          )}\r\n          <div className={loginStyles.action}>\r\n            <Button type=\"submit\" className={classes.btn}>\r\n              Book\r\n            </Button>\r\n            {passengerCount < 2 && (\r\n              <Button\r\n                type=\"button\"\r\n                className={classes.btn}\r\n                onClick={onClickAddPassenger}\r\n              >\r\n                Add Passenger\r\n              </Button>\r\n            )}\r\n            <Button\r\n              type=\"button\"\r\n              className={classes.btn}\r\n              onClick={onClickCancelHandler}\r\n            >\r\n              Cancel\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n    </Layout>\r\n  );\r\n}\r\nexport default Booking;\r\n","D:\\React JS\\space-ticket-booking-app\\src\\store\\userInputsSlice.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\MyBookings.js",["122","123","124","125","126"],"import React from \"react\";\r\nimport classes from \"./MyBooking.module.css\";\r\nimport Layout from \"../layout/Layout\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport TicketList from \"./TicketList\";\r\nimport Modal from \"../UI/Modal\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport ticketClasses from \"../UI/Button/Button.module.css\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nvar ticketId = null;\r\nfunction MyBookings() {\r\n\r\n  //************DECLARATIONS************//\r\n\r\n  const userEmail = useSelector((state) => state.login.userId);\r\n\r\n  const {\r\n    isLoading: bookingIsLoading,\r\n    error: bookingError,\r\n    sendRequest: sendBookingRequest,\r\n    response: bookingResponse,\r\n    resetError: resetBookingResponse,\r\n    resetResponse: resetBookingError,\r\n  } = useHttp();\r\n\r\n  const {\r\n    isLoading: cancelIsLoading,\r\n    error: cancelError,\r\n    sendRequest: sendCancelRequest,\r\n    response: cancelResponse,\r\n    resetError: resetCancelError,\r\n    resetResponse: resetCancelResponse,\r\n  } = useHttp();\r\n\r\n  const [showCancellationPrompt, setShowCancellationPrompt] = useState(false);\r\n\r\n  //************API CALLS************//\r\n\r\n  //Request to backend for bookings data\r\n  const fetchBookingDetails = async (requestJson) => {\r\n    sendBookingRequest({\r\n      url: \"http://localhost:8080/api/protected/fetchBookingDetails\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        userEmail: requestJson.userEmail,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //Request to backend for cancelling ticket\r\n  const cancelTicket = async (requestJson) => {\r\n    sendCancelRequest({\r\n      url: \"http://localhost:8080/api/protected/cancelTicket\",\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: {\r\n        bookingId: requestJson.ticketId,\r\n      },\r\n      errorMsg: \"Request failed!\",\r\n    });\r\n  };\r\n\r\n  //************ACTION HANDLERS************//\r\n\r\n  useEffect(() => {\r\n    const requestJson = { userEmail };\r\n    fetchBookingDetails(requestJson);\r\n  }, []);\r\n\r\n  function onTicketCancelHandler(id) {\r\n    ticketId = id;\r\n    setShowCancellationPrompt(true);\r\n  }\r\n\r\n  function cancellationHandler() {\r\n    const requestJson = {\r\n      ticketId,\r\n    };\r\n    cancelTicket(requestJson);\r\n    setShowCancellationPrompt(false);\r\n  }\r\n\r\n  function closeTicketCancelModal() {\r\n    setShowCancellationPrompt(false);\r\n    ticketId = null;\r\n  }\r\n\r\n  function recallFetchBooking() {\r\n    const requestJson = {\r\n      userEmail,\r\n    };\r\n    fetchBookingDetails(requestJson);\r\n    resetCancelResponse();\r\n    resetCancelError();\r\n  }\r\n\r\n  //************MODALS************//\r\n\r\n  const ticketCancelModalActions = (\r\n    <div className={classes.actions}>\r\n      <Button className={ticketClasses.button} onClick={cancellationHandler}>\r\n        Yes\r\n      </Button>\r\n      <Button className={ticketClasses.button} onClick={closeTicketCancelModal}>\r\n        No\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const ticketCancelModalContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>ARE YOU SURE? REFUNDS CAN TAKE UP TO 5-7 DAYS.</span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const cancellationMessageActions = (\r\n    <div className={classes.actions}>\r\n      <Button className={ticketClasses.button} onClick={recallFetchBooking}>\r\n        Close\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  const cancellationMessageContent = (\r\n    <React.Fragment>\r\n      <div className={classes.total}>\r\n        <span>{cancelResponse.responseMessage}</span>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  //************LOADING SPINNERS************//\r\n\r\n  if (bookingIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (cancelIsLoading) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {showCancellationPrompt && (\r\n        <Modal>\r\n          {ticketCancelModalContent}\r\n          {ticketCancelModalActions}\r\n        </Modal>\r\n      )}\r\n      {cancelResponse.responseCode === 0 && (\r\n        <Modal>\r\n          {cancellationMessageContent}\r\n          {cancellationMessageActions}\r\n        </Modal>\r\n      )}\r\n      <TicketList\r\n        bookingList={bookingResponse}\r\n        cancellationHandler={onTicketCancelHandler}\r\n      />\r\n    </Layout>\r\n  );\r\n}\r\nexport default MyBookings;\r\n","D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\Tickets.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\TicketDate.js",[],"D:\\React JS\\space-ticket-booking-app\\src\\components\\Ticket Booking\\TicketList.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":34,"column":6,"nodeType":"133","endLine":34,"endColumn":23,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"132","line":40,"column":6,"nodeType":"133","endLine":40,"endColumn":23,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":26,"column":12,"nodeType":"138","messageId":"139","endLine":26,"endColumn":22},{"ruleId":"136","severity":1,"message":"140","line":29,"column":17,"nodeType":"138","messageId":"139","endLine":29,"endColumn":32},{"ruleId":"136","severity":1,"message":"141","line":30,"column":20,"nodeType":"138","messageId":"139","endLine":30,"endColumn":38},{"ruleId":"131","severity":1,"message":"142","line":168,"column":6,"nodeType":"133","endLine":168,"endColumn":8,"suggestions":"143"},{"ruleId":"131","severity":1,"message":"144","line":192,"column":6,"nodeType":"133","endLine":192,"endColumn":46,"suggestions":"145"},{"ruleId":"131","severity":1,"message":"146","line":199,"column":6,"nodeType":"133","endLine":199,"endColumn":36,"suggestions":"147"},{"ruleId":"136","severity":1,"message":"148","line":36,"column":5,"nodeType":"138","messageId":"139","endLine":36,"endColumn":10},{"ruleId":"136","severity":1,"message":"149","line":39,"column":5,"nodeType":"138","messageId":"139","endLine":39,"endColumn":15},{"ruleId":"136","severity":1,"message":"150","line":40,"column":5,"nodeType":"138","messageId":"139","endLine":40,"endColumn":18},{"ruleId":"136","severity":1,"message":"151","line":59,"column":17,"nodeType":"138","messageId":"139","endLine":59,"endColumn":33},{"ruleId":"136","severity":1,"message":"152","line":22,"column":12,"nodeType":"138","messageId":"139","endLine":22,"endColumn":24},{"ruleId":"136","severity":1,"message":"153","line":25,"column":17,"nodeType":"138","messageId":"139","endLine":25,"endColumn":37},{"ruleId":"136","severity":1,"message":"154","line":26,"column":20,"nodeType":"138","messageId":"139","endLine":26,"endColumn":37},{"ruleId":"136","severity":1,"message":"155","line":31,"column":12,"nodeType":"138","messageId":"139","endLine":31,"endColumn":23},{"ruleId":"131","severity":1,"message":"156","line":77,"column":6,"nodeType":"133","endLine":77,"endColumn":8,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["160"],["161"],"no-unused-vars","'fetchError' is assigned a value but never used.","Identifier","unusedVar","'fetchResetError' is assigned a value but never used.","'fetchResetResponse' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'FetchProfileHandler' and 'userEmail'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has a missing dependency: 'saveResponse.responseCode'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'FetchProfileHandler', 'saveResponse.responseCode', and 'userEmail'. Either include them or remove the dependency array.",["164"],"'error' is assigned a value but never used.","'resetError' is assigned a value but never used.","'resetResponse' is assigned a value but never used.","'resetTicketError' is assigned a value but never used.","'bookingError' is assigned a value but never used.","'resetBookingResponse' is assigned a value but never used.","'resetBookingError' is assigned a value but never used.","'cancelError' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchBookingDetails' and 'userEmail'. Either include them or remove the dependency array.",["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"166","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [isAuthenticated, navigate]",{"range":"177","text":"178"},{"range":"179","text":"178"},"Update the dependencies array to be: [FetchProfileHandler, userEmail]",{"range":"180","text":"181"},"Update the dependencies array to be: [saveResponse.responseMessage, navigate, saveResponse.responseCode]",{"range":"182","text":"183"},"Update the dependencies array to be: [FetchProfileHandler, saveResponse.responseCode, saveResponse.responseMessage, userEmail]",{"range":"184","text":"185"},"Update the dependencies array to be: [fetchBookingDetails, userEmail]",{"range":"186","text":"187"},[1132,1149],"[isAuthenticated, navigate]",[1238,1255],[4843,4845],"[FetchProfileHandler, userEmail]",[5294,5334],"[saveResponse.responseMessage, navigate, saveResponse.responseCode]",[5502,5532],"[FetchProfileHandler, saveResponse.responseCode, saveResponse.responseMessage, userEmail]",[2207,2209],"[fetchBookingDetails, userEmail]"]