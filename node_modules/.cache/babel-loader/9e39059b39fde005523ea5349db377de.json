{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nfunction useHttp() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [responseJson, setResponseJson] = useState(\"\");\n\n  function resetError() {\n    setError(null);\n  }\n\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(requestConfig.errorMsg);\n      }\n\n      const data = await response.json();\n      setResponseJson(data);\n\n      if (data.responseCode === 1) {\n        throw new Error(data.responseMessage);\n      }\n    } catch (err) {\n      setError(err.message || requestConfig.errorMsg);\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading: isLoading,\n    error: error,\n    response: responseJson,\n    sendRequest: sendRequest,\n    resetError: resetError\n  };\n}\n\n_s(useHttp, \"joK6iy/xQvlZfOhxscjVTwl+Kcg=\");\n\nexport default useHttp;","map":{"version":3,"sources":["D:/React JS/space-ticket-booking-app/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","responseJson","setResponseJson","resetError","sendRequest","requestConfig","applyData","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","errorMsg","data","json","responseCode","responseMessage","err","message"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;;AAEA,WAASS,UAAT,GAAqB;AACnBH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AAED,QAAMI,WAAW,GAAGT,WAAW,CAAC,OAAOU,aAAP,EAAsBC,SAAtB,KAAoC;AAClER,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACH,aAAa,CAACI,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,GAAuBL,aAAa,CAACK,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEP,aAAa,CAACO,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeT,aAAa,CAACO,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUX,aAAa,CAACY,QAAxB,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AACAjB,MAAAA,eAAe,CAACgB,IAAD,CAAf;;AAEA,UAAGA,IAAI,CAACE,YAAL,KAAsB,CAAzB,EAA2B;AACzB,cAAM,IAAIJ,KAAJ,CAAUE,IAAI,CAACG,eAAf,CAAN;AACD;AAEF,KAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAACsB,GAAG,CAACC,OAAJ,IAAelB,aAAa,CAACY,QAA9B,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAzB8B,EAyB5B,EAzB4B,CAA/B;AA2BA,SAAO;AACLD,IAAAA,SAAS,EAAEA,SADN;AAELE,IAAAA,KAAK,EAAEA,KAFF;AAGLQ,IAAAA,QAAQ,EAAEN,YAHL;AAILG,IAAAA,WAAW,EAAEA,WAJR;AAKLD,IAAAA,UAAU,EAAEA;AALP,GAAP;AAOD;;GA3CQP,O;;AA4CT,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nfunction useHttp() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [responseJson, setResponseJson] = useState(\"\");\r\n\r\n  function resetError(){\r\n    setError(null);\r\n  }\r\n\r\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : \"GET\",\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(requestConfig.errorMsg);\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseJson(data);\r\n\r\n      if(data.responseCode === 1){\r\n        throw new Error(data.responseMessage);\r\n      }\r\n\r\n    } catch (err) {\r\n      setError(err.message || requestConfig.errorMsg);\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  return {\r\n    isLoading: isLoading,\r\n    error: error,\r\n    response: responseJson,\r\n    sendRequest: sendRequest,\r\n    resetError: resetError,\r\n  };\r\n}\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}